/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CuratorService } from "../curator.service";
import { CuratorCreateInput } from "./CuratorCreateInput";
import { Curator } from "./Curator";
import { CuratorFindManyArgs } from "./CuratorFindManyArgs";
import { CuratorWhereUniqueInput } from "./CuratorWhereUniqueInput";
import { CuratorUpdateInput } from "./CuratorUpdateInput";

export class CuratorControllerBase {
  constructor(protected readonly service: CuratorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Curator })
  async createCurator(
    @common.Body() data: CuratorCreateInput
  ): Promise<Curator> {
    return await this.service.createCurator({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        email: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Curator] })
  @ApiNestedQuery(CuratorFindManyArgs)
  async curators(@common.Req() request: Request): Promise<Curator[]> {
    const args = plainToClass(CuratorFindManyArgs, request.query);
    return this.service.curators({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        email: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Curator })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async curator(
    @common.Param() params: CuratorWhereUniqueInput
  ): Promise<Curator | null> {
    const result = await this.service.curator({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        email: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Curator })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCurator(
    @common.Param() params: CuratorWhereUniqueInput,
    @common.Body() data: CuratorUpdateInput
  ): Promise<Curator | null> {
    try {
      return await this.service.updateCurator({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          email: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Curator })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCurator(
    @common.Param() params: CuratorWhereUniqueInput
  ): Promise<Curator | null> {
    try {
      return await this.service.deleteCurator({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          email: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
