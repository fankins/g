/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Curator as PrismaCurator } from "@prisma/client";

export class CuratorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CuratorCountArgs, "select">): Promise<number> {
    return this.prisma.curator.count(args);
  }

  async curators(args: Prisma.CuratorFindManyArgs): Promise<PrismaCurator[]> {
    return this.prisma.curator.findMany(args);
  }
  async curator(
    args: Prisma.CuratorFindUniqueArgs
  ): Promise<PrismaCurator | null> {
    return this.prisma.curator.findUnique(args);
  }
  async createCurator(args: Prisma.CuratorCreateArgs): Promise<PrismaCurator> {
    return this.prisma.curator.create(args);
  }
  async updateCurator(args: Prisma.CuratorUpdateArgs): Promise<PrismaCurator> {
    return this.prisma.curator.update(args);
  }
  async deleteCurator(args: Prisma.CuratorDeleteArgs): Promise<PrismaCurator> {
    return this.prisma.curator.delete(args);
  }
}
