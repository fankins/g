/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Curator } from "./Curator";
import { CuratorCountArgs } from "./CuratorCountArgs";
import { CuratorFindManyArgs } from "./CuratorFindManyArgs";
import { CuratorFindUniqueArgs } from "./CuratorFindUniqueArgs";
import { CreateCuratorArgs } from "./CreateCuratorArgs";
import { UpdateCuratorArgs } from "./UpdateCuratorArgs";
import { DeleteCuratorArgs } from "./DeleteCuratorArgs";
import { CuratorService } from "../curator.service";
@graphql.Resolver(() => Curator)
export class CuratorResolverBase {
  constructor(protected readonly service: CuratorService) {}

  async _curatorsMeta(
    @graphql.Args() args: CuratorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Curator])
  async curators(
    @graphql.Args() args: CuratorFindManyArgs
  ): Promise<Curator[]> {
    return this.service.curators(args);
  }

  @graphql.Query(() => Curator, { nullable: true })
  async curator(
    @graphql.Args() args: CuratorFindUniqueArgs
  ): Promise<Curator | null> {
    const result = await this.service.curator(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Curator)
  async createCurator(
    @graphql.Args() args: CreateCuratorArgs
  ): Promise<Curator> {
    return await this.service.createCurator({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Curator)
  async updateCurator(
    @graphql.Args() args: UpdateCuratorArgs
  ): Promise<Curator | null> {
    try {
      return await this.service.updateCurator({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Curator)
  async deleteCurator(
    @graphql.Args() args: DeleteCuratorArgs
  ): Promise<Curator | null> {
    try {
      return await this.service.deleteCurator(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
